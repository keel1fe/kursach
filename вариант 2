import tkinter as tk
from tkinter import *
import os

# Цвета
color = "burlywood"
white_piece_color = "white"
black_piece_color = "black"
selected_color = "yellow"
queen_color_wh = "gold"
queen_color_bl = "red"


# Функция для регистрации пользователя
def regis():
    global txt, txtl, txtp, login, password, lab
    def dismiss(win_t):
        win_t.grab_release()
        win_t.destroy()

    s_l = login.get()
    s_p = password.get()
    if len(s_l) == 0 or len(s_p) == 0:
        win = Toplevel(root, relief=SUNKEN)
        win.geometry("400x100+730+420")
        win.title("Регистрация / Авторизация")
        win.minsize(width=400, height=100)
        win.maxsize(width=400, height=100)
        win.protocol("WM_DELETE_WINDOW", lambda: dismiss(win))  # перехватываем нажатие на крестик
        Label(win, text='Пуcтое поле "Логин" или "Пароль"', font=("Arial", 14, 'bold')).place(x=30, y=10)
        close_button = tk.Button(win, text="Повторить ввод", command=lambda: dismiss(win))
        close_button.place(x=150, y=50)
        win.grab_set()  # захватываем пользовательский ввод
    else:
        f_reg = False
        file = open("l_p.txt", "r+")  # открываем файл
        a = file.read().split()  # читаем файл
        for j in range(len(a)):  # ищем совпадение логин и пароль
            if a[j] == s_l and a[j + 1] == s_p:
                f_reg = True
                break
        if not f_reg:  # совпадения нет
            file.seek(0, os.SEEK_END)
            file.write(s_l + ' ' + s_p + ' ')  # записываем новые логин и пароль
        file.close()
        win_r = Toplevel(root, relief=SUNKEN)
        win_r.geometry("400x100+730+420")
        win_r.title("Регистрация / Авторизация")
        win_r.minsize(width=400, height=100)
        win_r.maxsize(width=400, height=100)
        win_r.protocol("WM_DELETE_WINDOW", lambda: dismiss(win_r))  # перехватываем нажатие на крестик
        Label(win_r, text="Уважаемый(-ая) " + s_l + ", вы успешно" + "\n зарегистрировались /авторизовались",
              font=("Arial", 14, 'bold')).place(x=5, y=10)
        close_button = tk.Button(win_r, text="Начать игру", command=lambda: [dismiss(win_r), start_game()])
        close_button.place(x=150, y=65)
        win_r.grab_set()  # захватываем пользовательский ввод
        txt.place_forget()  # стираем виджеты регистрации
        txtl.place_forget()
        txtp.place_forget()
        login.place_forget()
        password.place_forget()
        close_btn.place_forget()

def rules():
        rules_file = "Правила игры.docx"
        os.startfile(rules_file)

# Глобальные переменные
k = 100  # Размер клетки
pole = [
    [0, 0, 0, 0, 0, 0, 0, 0],
    [-1, -1, -1, -1, -1, -1, -1, -1],
    [-1, -1, -1, -1, -1, -1, -1, -1],
    [0, 0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0, 0],
    [1, 1, 1, 1, 1, 1, 1, 1],
    [1, 1, 1, 1, 1, 1, 1, 1],
    [0, 0, 0, 0, 0, 0, 0, 0]
]

selected_piece = None
current_player = 1
must_capture = False
cells = []

def get_cell(x, y):
    return y // k, x // k

def is_valid_move(start_row, start_col, end_row, end_col, player):
    if abs(start_row - end_row) + abs(start_col - end_col) != 1:
        return False
    if abs(start_col - end_col) > 1:
        return False
    return True

def is_valid_move_queen(start_row, start_col, end_row, end_col):
    if start_row != end_row and start_col != end_col:
        return False
    step_row = 1 if end_row > start_row else -1 if end_row < start_row else 0
    step_col = 1 if end_col > start_col else -1 if end_col < start_col else 0
    row, col = start_row + step_row, start_col + step_col
    while row != end_row or col != end_col:
        if pole[row][col] != 0:
            return False
        row += step_row
        col += step_col
    return True

def can_capture(start_row, start_col, end_row, end_col, player):
    if abs(start_row - end_row) != 2 and abs(start_col - end_col) != 2:
        return False
    mid_row = (start_row + end_row) // 2
    mid_col = (start_col + end_col) // 2
    if pole[mid_row][mid_col] == -player:
        return True
    return False

def can_capture_queen(start_row, start_col, end_row, end_col, player):
    if start_row == end_row or start_col == end_col:
        step_row = 1 if end_row > start_row else -1 if end_row < start_row else 0
        step_col = 1 if end_col > start_col else -1 if end_col < start_col else 0
        row, col = start_row + step_row, start_col + step_col
        captured = False
        while row != end_row or col != end_col:
            if pole[row][col] != 0:
                if pole[row][col] == -player and not captured:
                    captured = True
                else:
                    return False
            row += step_row
            col += step_col
        return captured
    return False

def on_click(event):
    global selected_piece, current_player, must_capture
    row, col = get_cell(event.x, event.y)
    if 0 <= row < 8 and 0 <= col < 8:
        if event.num == 1 and current_player == 1:  # Левая кнопка мыши для белых
            handle_move(row, col, 1)
        elif event.num == 3 and current_player == -1:  # Правая кнопка мыши для черных
            handle_move(row, col, -1)

def handle_move(row, col, player):
    global selected_piece, current_player, must_capture
    if selected_piece is None:
        if pole[row][col] == player:
            selected_piece = (row, col)
            canvas.itemconfig(cells[row][col], fill=selected_color)
    else:
        if pole[row][col] == 0:
            start_row, start_col = selected_piece
            if is_valid_move(start_row, start_col, row, col, player):
                pole[row][col] = pole[start_row][start_col]
                pole[start_row][start_col] = 0
                redraw_board()
                selected_piece = None
                current_player = -current_player
            elif can_capture(start_row, start_col, row, col, player):
                pole[row][col] = pole[start_row][start_col]
                pole[start_row][start_col] = 0
                mid_row = (start_row + row) // 2
                mid_col = (start_col + col) // 2
                pole[mid_row][mid_col] = 0
                if (player == 1 and row == 0) or (player == -1 and row == 7):
                    pole[row][col] = 2 * player
                redraw_board()
                selected_piece = None
                if not can_capture_again(row, col, player):
                    current_player = -current_player
            else:
                canvas.itemconfig(cells[start_row][start_col], fill=color if (start_row + start_col) % 2 == 1 else color )
                selected_piece = None

def can_capture_again(row, col, player):
    for dr, dc in [(-2, 0), (2, 0), (0, -2), (0, 2)]:
        new_row, new_col = row + dr, col + dc
        if 0 <= new_row < 8 and 0 <= new_col < 8:
            if can_capture(row, col, new_row, new_col, player):
                return True
    return False

def redraw_board():
    canvas.delete("all")
    for i in range(8):
        for j in range(8):
            x0, y0 = j * k, i * k
            x1, y1 = x0 + k, y0 + k
            cells[i][j] = canvas.create_rectangle(x0, y0, x1, y1, fill=color, outline="black", width=3)
            if pole[i][j] == 1:
                canvas.create_oval(j * k + 10, i * k + 10, j * k + k - 10, i * k + k - 10, fill=white_piece_color, outline="")
            elif pole[i][j] == -1:
                canvas.create_oval(j * k + 10, i * k + 10, j * k + k - 10, i * k + k - 10, fill=black_piece_color, outline="")
            elif pole[i][j] == 2:
                canvas.create_oval(j * k + 10, i * k + 10, j * k + k - 10, i * k + k - 10, fill=queen_color_wh, outline="")
            elif pole[i][j] == -2:
                canvas.create_oval(j * k + 10, i * k + 10, j * k + k - 10, i * k + k - 10, fill=queen_color_bl, outline="")
            root.state('zoomed')
def start_game():
    global canvas, cells
    rules_btn.place_forget()
    canvas = tk.Canvas(root, width=8 * k, height=8 * k, bg="white")
    canvas.place(relx=0.5, rely=0.5, anchor=tk.CENTER)
    cells = [[None for _ in range(8)] for _ in range(8)]
    redraw_board()
    canvas.bind("<Button-1>", on_click)
    canvas.bind("<Button-3>", on_click)


# Создание главного окна
root = Tk()
root.title('Курсовая Работа: Турецкий шашки-поддавки')  # заголовок окна
root.geometry("530x250+550+300")  # Устанавливаем начальный размер окна для регистрации

# Регистрация и авторизация
txt = Label(root, text="Для игры введите Ваш логин и пароль\nДля регистрации введите новый логин и пароль",
            font=("Arial", 14, 'bold'))
txt.place(x=40, y=20)
txtl = Label(root, text='Логин', font=("Arial", 14, 'bold'))
txtl.place(x=70, y=90)
login = tk.Entry(root, width=10, bd=3)
login.place(x=170, y=94)
txtp = Label(root, text='Пароль', font=("Arial", 14, 'bold'))
txtp.place(x=70, y=130)
password = tk.Entry(root, width=10, bd=3)
password.place(x=170, y=130)
close_btn = tk.Button(root, text="Зарегистрироваться / начать игру", command=regis)
close_btn.place(x=70, y=180)
rules_btn = tk.Button(root, text="Правила игры", command=rules)
rules_btn.place(x=320, y=180)
# Запуск приложения
mainloop()
